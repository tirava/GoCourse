1. "resp.Body.Close()" указан без присвоения переменной err, а на следующей строке она проверяется - в обоих fetch-ах
Исправить на "err = resp.Body.Close()"

2. Последовательный вариант сканера выполняется в общем за сумму ответов всех сканируемых сайтов, например:
0.20s   13540 ya.ru
0.10s  412566 rambler.ru
0.94s  516956 www.yahoo.com
0.30s   11854 google.ru
0.39s   14251 google.com
0.09s  480506 gazeta.ru
0.05s   52082 www.seven-sky.net
0.12s   13503 www.ya.ru
0.07s   47846 geekbrains.ru
0.45s    8158 golang.org
0.06s     528 grani.ru
0.10s   33803 smi2.ru
0.29s   42930 specletter.com
1.10s  200169 ves.lv
0.11s   44315 socioscope.com
0.42s   37557 www.gumer.info

4.79s elapsed

3. Параллельный вариант сканера выполняется в общем за время ответа самого медленного из сканируемых сайтов, например:
0.06s     528 grani.ru
0.08s   33803 smi2.ru
0.11s   14245 google.com
0.11s   52082 www.seven-sky.net
0.11s   47846 geekbrains.ru
0.11s   11830 google.ru
0.11s   44259 socioscope.com
0.13s  480394 gazeta.ru
0.14s   13540 www.ya.ru
0.17s  413099 rambler.ru
0.19s   13535 ya.ru
0.26s   42918 specletter.com
0.39s    8158 golang.org
0.45s   37557 www.gumer.info
0.85s  513935 www.yahoo.com
1.12s  200169 ves.lv

1.12s elapsed

4. Варианты применения сканера:
 - скорость: найти самое быстрое зеркало ресурса (сервер времени, репозиторий дистрибутивов итд итп)
 - мониторинг: выявить неработоспособный ресурс из списка
 - оптимизация: возвращение сайтом как можно меньшего кол-ва байт на запрос

